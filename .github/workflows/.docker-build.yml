name: Build, Push and Deploy Docker Image

# Trigger on push to main branch
on:
  push:
    branches: [ master ]
  # Optional: Allow manual trigger
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:latest,${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:${{ github.sha }}
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            # Set domain from GitHub secret
            DOMAIN="${{ secrets.APP_DOMAIN }}"
            echo "Deploying to domain: $DOMAIN"
            
            # Create the application directory in /var/www/
            mkdir -p /var/www/fastapi-app
            
            # Create docker-compose.yml - only FastAPI app, no Nginx container
            cat > /var/www/fastapi-app/docker-compose.yml << EOL
            version: '3'
            
            services:
              app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:latest
                container_name: fastapi-app
                restart: always
                ports:
                  - "127.0.0.1:8000:8000"  # Only expose to localhost
                command: uvicorn main:app --host 0.0.0.0 --port 8000
            EOL
            
            # Set up Nginx site configuration for your domain with both HTTP and HTTPS
            cat > /etc/nginx/sites-available/$DOMAIN << EOL
            server {
                listen 80;
                server_name $DOMAIN;
                # Redirect HTTP to HTTPS
                location / {
                    return 301 https://\$host\$request_uri;
                }
            }

            server {
                listen 443 ssl;
                server_name $DOMAIN;
                ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL
            
            # Enable the site by creating a symbolic link
            ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
            
            # Check nginx config syntax
            nginx -t || echo "Nginx configuration error - check your SSL certificates"
            
            # Pull the latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:latest
            
            # Stop and remove any existing containers
            docker stop fastapi-app || true
            docker rm fastapi-app || true
            
            # Remove any containers from previous setup
            docker stop nginx-fastapi || true
            docker rm nginx-fastapi || true
            
            # Start the container
            cd /var/www/fastapi-app
            docker-compose down --remove-orphans || true
            docker-compose up -d
            
            # Add SSL with Certbot (if not already configured)
            if [ ! -f /etc/letsencrypt/live/$DOMAIN/fullchain.pem ]; then
              # Temporarily replace the SSL config with HTTP-only
              cat > /etc/nginx/sites-available/$DOMAIN << EOL
              server {
                  listen 80;
                  server_name $DOMAIN;
                  
                  location / {
                      proxy_pass http://127.0.0.1:8000;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
              EOL
              
              # Reload Nginx to apply HTTP-only config
              nginx -t && systemctl reload nginx
              
              # Now run certbot to get the certificate
              certbot --nginx -d $DOMAIN --non-interactive --agree-tos --email ${{ secrets.ADMIN_EMAIL }}
              
              # Certbot will automatically update the config to include HTTPS
            fi
            
            # Final Nginx reload to apply all changes
            systemctl reload nginx
            
            echo "Deployment complete! Your application should be available at https://$DOMAIN"
            echo "If you haven't set up DNS yet, please create an A record for $DOMAIN pointing to $(curl -s ifconfig.me)"